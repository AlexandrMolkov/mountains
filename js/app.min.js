/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/common/burger.js":
/*!*********************************!*\
  !*** ./src/js/common/burger.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "burgInit": () => (/* binding */ burgInit),
/* harmony export */   "hideMobileMenu": () => (/* binding */ hideMobileMenu)
/* harmony export */ });


let cbClick
const clickCallback = (condition) => {
    if(cbClick) {
        cbClick.forEach( cb =>{
            cb(condition)
        })
    }

}
const burgInit = (clickCallbacks=undefined) => {
    const blur = document.querySelector('.blur')
    cbClick = clickCallbacks
    document.addEventListener('click', (e) => {
        if(e.target.classList.contains('blur') || e.target.classList.contains('mobile-menu')){
            clickCallback(false)
            document.querySelectorAll(`.burg`)
                .forEach( b => {
                    b.classList.remove(`open`)
                    document.body.classList.remove(`lock`)
                    blur.classList.remove('blur_active')
                    document.querySelector(b.dataset.target).classList.remove(`show`)
                })
        }
})

document.querySelectorAll(`.burg`)
    .forEach( b => {
        const target = document.querySelector(b.dataset.target)
        const inner = document.querySelector('burg__inner')
        target.classList.add(`nav-burg`)
        
        target.addEventListener('click', e => {
            if(e.target.classList.contains('nav__link')) {
                hideMobileMenu()
                
            }
        })

        b.addEventListener('click', (e) => {
            if(e.target.closest('.burg')) {
                const burg = e.target.closest('.burg')
                burg.classList.toggle(`open`)
                blur.classList.add('blur_active')
                document.querySelector(burg.dataset.target).classList.toggle(`show`)

                if (document.querySelector(burg.dataset.target).classList.contains(`show`))
                {
                    document.body.classList.add(`lock`)
                    clickCallback(true)
                } else{
                    document.body.classList.remove(`lock`)
                    blur.classList.remove('blur_active')
                    clickCallback(false)
                }
            }
        })
    })
}




const hideMobileMenu = () => {
    const burg = document.querySelector(`.burg`)
    document.body.classList.remove(`lock`)
    document.querySelector(burg.dataset.target).classList.remove(`show`)
    burg.classList.remove(`open`)
    document.querySelector('.blur').classList.remove('blur_active')
    clickCallback(false)
}



window.addEventListener('resize', () =>  {
    hideMobileMenu()
});


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_burger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common/burger.js */ "./src/js/common/burger.js");



document.addEventListener('DOMContentLoaded', () => {

    //  smooth scroll
    const anchors = document.querySelectorAll('a[href*="#"]')
    for (let anchor of anchors) {
            anchor.addEventListener('click', function (e) {
            e.preventDefault()
        
            const blockID = anchor.getAttribute('href').substring(1)
            if(document.getElementById(blockID)) {
                document.getElementById(blockID).scrollIntoView({
                behavior: 'smooth',
                block: 'start'
                })
            }
        })
    }


    const hidePagi = condition => {
        if(condition){
            document.querySelector('.page-navigation').classList.add('hide')
            return
        }
        document.querySelector('.page-navigation').classList.remove('hide')
    }

    // burger
    ;(0,_common_burger_js__WEBPACK_IMPORTED_MODULE_0__.burgInit)([hidePagi])



     //////////  scrolling



     setTimeout(() => {
        window.scrollTo(0, 0);
        document.body.classList.add("stop-scrolling");
     }, 100);

    let curSection = 0 
    
    const scrollAnhors = document.querySelectorAll('[data-anchor]')
    let scrollTop = 0
    const paginationLinks = Array.from(document.querySelectorAll('.page-navigation__link'))

    const pagiPrgrs = document.querySelector('.page-navigation__progress-inner')
    const pagiPrgrsMove = value => {
       
        pagiPrgrs.style.top = `calc(${100 / (scrollAnhors.length -1) * value  + '%'} - ${65/ (scrollAnhors.length -1) * value }px)`
    }

    const setCurrent = () =>{
        scrollAnhors.forEach( s => {
            s.classList.remove('current')
        })
        scrollAnhors[curSection].classList.add('anim')
        scrollAnhors[curSection].classList.add('current')
    }
    setCurrent()

    paginationLinks.forEach( l => {

        l.href = '#'
        l.addEventListener('click', e => {
            ;(0,_common_burger_js__WEBPACK_IMPORTED_MODULE_0__.hideMobileMenu)()
            curSection = paginationLinks.indexOf(e.target)
            scrollTop = 0

            for (let index = 0; index < curSection; index++) {
                scrollTop += scrollAnhors[index].offsetHeight
            }

            document.querySelector('.wrapper').style.transform = `translateY(-${scrollTop}px)`

            pagiPrgrsMove(curSection)
            setCurrent()

        })
    })

    const down = () => {
        console.log(curSection)
        scrollTop += scrollAnhors[curSection].offsetHeight
        document.querySelector('.wrapper').style.transform = `translateY(-${scrollTop}px)`
        curSection++

        setCurrent()

        ;(0,_common_burger_js__WEBPACK_IMPORTED_MODULE_0__.hideMobileMenu)()
    }
    const up = () => {
        curSection--
        scrollTop -= scrollAnhors[curSection].offsetHeight
        document.querySelector('.wrapper').style.transform = `translateY(-${scrollTop}px)`

        setCurrent()

        ;(0,_common_burger_js__WEBPACK_IMPORTED_MODULE_0__.hideMobileMenu)()
    }
    
    document.addEventListener('wheel', e => {

        if(e.deltaY > 0) {

            if(curSection != scrollAnhors.length-1){
                down()
            }

        } else{
            if(curSection != 0){
                up()
            }
        }
        pagiPrgrsMove(curSection)
    })

    document.addEventListener('touchstart', (e) => {

        window.scroll(() => { if( body.scrollTop > 0 ) body.scrollTop(0) } )
    
        const positionY = e.touches[0].clientY
        let newPositionY 
        let tStart = e.touches[0].clientY
    
        const newPos = (e) => {
           newPositionY = e.touches[0].clientY
        }
        const scroll = (e) => {
            const t = e.target.closest(".full-scroll-item")
            const y = (tStart - e.touches[0].clientY) 
            if(t)  {
                t.style.scrollBehavior = 'auto';
                t.scrollTo(0, y);
                tStart = e.touches[0].clientY + t.scrollTop
            }
        }
        
        document.addEventListener('touchmove', newPos)
        document.addEventListener('touchmove', scroll)
    
        document.addEventListener('touchend', (e) => {
            
            document.removeEventListener('touchmove', newPos)
    
            if(newPositionY > positionY){
    
                if(curSection != 0){
                    up()
                }
                pagiPrgrsMove(curSection)
    
            } else if (newPositionY < positionY){

                if(curSection != scrollAnhors.length-1){
                    down()
                }

                pagiPrgrsMove(curSection)
            }
        },{once: true}) 
    }) 

    window.addEventListener('resize', e => {
        scrollTop = 0
        for (let index = 0; index < curSection; index++) {
            scrollTop += scrollAnhors[index].offsetHeight
        }
        document.querySelector('.wrapper').style.transform = `translateY(-${scrollTop}px)`
    })
})



})();

/******/ })()
;
//# sourceMappingURL=app.min.js.map